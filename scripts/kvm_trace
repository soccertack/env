#!/usr/bin/python
import os
import sys
import pickle

KVM_TRACE_PATH="/sys/kernel/debug/tracing/events/kvm"
cmd=["Quit", "KVM All"]
options = ['l', 's']
on_list=[]
HOME=os.path.expanduser('~')
filename = HOME+'/.trace'

def show_traces():
        global on_list
        on_list=[]
	i = 1
	print "----------------------------------"
	left_item = '{:02}'.format(1)+".[-] "+cmd[i]
	i +=1
	for dirname in os.walk(KVM_TRACE_PATH).next()[1]:
		f = open(KVM_TRACE_PATH+"/"+dirname+"/enable", "r")
		trace_on = f.read()
		f.close()
		trace_on = trace_on.rstrip('\r\n')
		cmd.append(dirname)
		item = '{:02}'.format(i)+".["+trace_on+"] "+dirname

                if trace_on == '1':
                    on_list.append(dirname)

		# Print two columns
		if i%2 == 0:
			print '{0:40}  {1}'.format(left_item, item)
		else:
			left_item = item

		i += 1
	print "----------------------------------"

def show_options():
        print ('l. load config')
        print ('s. save config')

	print "----------------------------------"

def handle_save():
    with open(filename, "wb+") as fp:
        pickle.dump(on_list, fp)
    print('Saved')

def sync_on_list():

    for dirname in os.walk(KVM_TRACE_PATH).next()[1]:
        flag = 0
        if dirname in on_list:
            flag = 1
        os.system("echo "+str(flag)+" > " + KVM_TRACE_PATH+"/"+dirname+"/enable")

def handle_load():
    global on_list
    with open(filename, "rb") as fp:
        on_list  = pickle.load(fp)
    print('Loaded')
    print (on_list)
    sync_on_list()

def handle_option(userInput):
    if userInput in options:
        if userInput == 's':
            handle_save()
        if userInput == 'l':
            handle_load()
    else:
        print('Available options:', options)

def handle_trace(trace_num):

	if trace_num == 0:
		sys.exit(1)

	val = input("Set " + cmd[trace_num] + " to 0 or 1? ")
	if trace_num == 1:
		os.system("echo "+str(val)+" > " + KVM_TRACE_PATH+"/enable")
	else:
		os.system("echo "+str(val)+" > " + KVM_TRACE_PATH+"/"+cmd[trace_num]+"/enable")

def handle_input(userInput):

    try:
           val = int(userInput)
           handle_trace(val)
    except ValueError:
           handle_option(userInput)

def show_on_list():
    print("On list: ", on_list)

while 1:
	show_traces()
        show_options()
        show_on_list()
	userInput = raw_input("Enter trace number or option: [0 to quit] ")

        print(userInput)

        handle_input(userInput)


